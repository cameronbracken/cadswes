# RiverWare_Ruleset 5.1.3 Patch
# Created 12:59 December 15, 2009
# 
RULESET
AGENDA_ORDER ASCENDING;
DESCRIPTION "";
PRECISION   8;
BEGIN

  POLICY_GROUP   "Fontenelle";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  BEGIN

    RULE                 "MinFlow";
    DESCRIPTION          "This rule ensurs that the minimum instream flow requirements are met. If a lower priority rule sets the flow lower than the min flow then this rule resets the flow. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "HasAnyRuleFired"( { "Safe Channel Capacity" , "Set September-November Baseflow" , "Set December-March Baseflow" , "Set April or August Outflow" , "Set Baseflow in off month" , "Set June Outflow" , "Set July Outflow" } ) COMMENTED_BY "This is necessary for 1,2,3 rule order to prevent trumping of lower priority rules. <br>Not necessary in 3,2,1 order but does not hurt anything. ";
    BEGIN

      IF_STATEMENT ($ "Fontenelle.Outflow" [] < $ "FontenelleData.MinFlow" []) THEN
            $ "Fontenelle.Outflow" [] := $ "FontenelleData.MinFlow" [];

      END_IF_STATEMENT;

    END;

    RULE                 "Max Elevation";
    DESCRIPTION          "This rule prevents overtopping. If a previous rule sets the outflow such that the elevation would overtop the dam, this rule will set the outflow to prevent this. The ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "HasAnyRuleFired"( { "Safe Channel Capacity" , "Set September-November Baseflow" , "Set December-March Baseflow" , "Set April or August Outflow" , "Set Baseflow in off month" , "Set June Outflow" , "Set July Outflow" } ) COMMENTED_BY "This is necessary for 1,2,3 rule order to prevent trumping of lower priority rules. <br>Not necessary in 3,2,1 order but does not hurt anything. ";
    BEGIN

      IF_STATEMENT ($ "Fontenelle.Pool Elevation" [] > $ "FontenelleData.MaxElevation" []) THEN
          DESCRIPTION          "If the Pool elevation goes higher than the max elevation then release whatever necessary to not overtop";
      $ "Fontenelle.Outflow" [] := "GetMaxOutflowGivenHW"( % "Fontenelle", $ "FontenelleData.MaxElevation" [], @"t" );

      END_IF_STATEMENT;

    END;

    RULE                 "Safe Channel Capacity";
    DESCRIPTION          "Prevents outflow from exceeding safe channel capacity unless there is a chance of overtopping, in which case, the &quot;Max Elevation&quot; rule will take precedence. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "HasAnyRuleFired"( { "Safe Channel Capacity" , "Set September-November Baseflow" , "Set December-March Baseflow" , "Set April or August Outflow" , "Set Baseflow in off month" , "Set June Outflow" , "Set July Outflow" } );
    BEGIN

      IF_STATEMENT ($ "Fontenelle.Outflow" [] > $ "FontenelleData.SafeChannelCapacity" []) THEN
            $ "Fontenelle.Outflow" [] := $ "FontenelleData.SafeChannelCapacity" [];

      END_IF_STATEMENT;

    END;

    RULE                 "Set September-November Baseflow";
    DESCRIPTION          "Compute the steady flow over September to March necsessary to meet Apr 1 target. <br>Change in storage plus forecasted volume divided by 3 months.  The next two months <br>will look back at this value.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "September" };
    BEGIN

    DESCRIPTION          "Compute the steady flow over September to March necsessary to meet Apr 1 target. <br>Change in storage plus forecasted volume divided by 3 months.  The next two months <br>will look back at this value.";
      $ "Fontenelle.Outflow" [] := ( "ElevationToStorage"( % "Fontenelle", $ "Fontenelle.Pool Elevation" [@"t"] ) - "ElevationToStorage"( % "Fontenelle", $ "FontenelleData.April1Target" [] ) + "SumFlowsToVolume"( $ "Fontenelle.Inflow", @"t", @"t + 6" ) ) / 7.00000000 "month";

    END;

    RULE                 "Set December-March Baseflow";
    DESCRIPTION          "This rule is the second of two that set the steady baseflow at Fontenelle.  This rule looks ahead at the forecasted volumes and determines what the max steady flow for the months of September-March can be. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "December" };
    BEGIN

    DESCRIPTION          "Compute the steady flow over December to March necsessary to meet Apr 1 target. <br>Change in storage plus forecasted volume divided by 4 months. <br>The next 3 months will look back at this value.";
      $ "Fontenelle.Outflow" [] := ( "ElevationToStorage"( % "Fontenelle", $ "Fontenelle.Pool Elevation" [@"t"] ) - "ElevationToStorage"( % "Fontenelle", $ "FontenelleData.April1Target" [] ) + "SumFlowsToVolume"( $ "Fontenelle.Inflow", @"t", @"t + 3" ) ) / 4.00000000 "month";

    END;

    RULE                 "Set April, May or August Outflow";
    DESCRIPTION          "Sets the April and August release to the maximum possible, this also sets May since may gets set to the same as April.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "April" , "August" , "May" };
    BEGIN

    DESCRIPTION          "Only set value of Outflow is set to avoid error messages";
      IF_STATEMENT (NaNToZero ( $ "Fontenelle.Outflow" [] ) != 0.00000000 "cfs") THEN
          DESCRIPTION          "April, May or August Outflow";
      $ "Fontenelle.Outflow" [] := "GetMaxReleaseGivenInflow"( % "Fontenelle", $ "Fontenelle.Inflow" [], @"t" );

      END_IF_STATEMENT;

    END;

    RULE                 "Set Baseflow in off month";
    DESCRIPTION          "Handles the case when the model is started in October, November, January, February, March, or May. In these months the baseflow needs to be set to whatever the previous month's value was. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "October" , "November" , "January" , "February" , "March" , "" };
    BEGIN

      $ "Fontenelle.Outflow" [] := $ "Fontenelle.Outflow" [@"t - 1"];

    END;

    RULE                 "Set June Outflow";
    DESCRIPTION          "This rule sets the June outflow such that the july 1 target elevation is met.  Alternate cases are when SolveOutflow returns a value greater the the max possible release or less than power plant capacity.  Min(MaxRelease, Max(Release to meet target, power plant capactiy)).";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "June" };
    BEGIN

      $ "Fontenelle.Outflow" [] := "Min"( "GetMaxOutflowGivenInflow"( % "Fontenelle", $ "Fontenelle.Inflow" [], @"t" ) COMMENTED_BY "Maximum possible release from the res", "Max"( "SolveOutflow"( % "Fontenelle", $ "Fontenelle.Inflow" [], "ElevationToStorage"( % "Fontenelle", $ "FontenelleData.July1Target" [] ), "ElevationToStorage"( % "Fontenelle", $ "Fontenelle.Pool Elevation" [@"t - 1"] ), @"t" ) COMMENTED_BY "Release to meet target elevation", "GetMaxReleaseGivenInflow"( % "Fontenelle", $ "Fontenelle.Inflow" [], @"t" ) COMMENTED_BY "Powerplant Capacity" ) );

    END;

    RULE                 "Set July Outflow";
    DESCRIPTION          "Solve for the outflow which will cause the pool elevation to reach the end of timestep target. Do not let outflow go below power plant capacity or above the max possible release.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "July" };
    BEGIN

      $ "Fontenelle.Outflow" [] := "Min"( "GetMaxOutflowGivenInflow"( % "Fontenelle", $ "Fontenelle.Inflow" [], @"t" ) COMMENTED_BY "Maximum possible release from the res", "Max"( "SolveOutflow"( % "Fontenelle", $ "Fontenelle.Inflow" [], "ElevationToStorage"( % "Fontenelle", $ "FontenelleData.August1Target" [] ), "ElevationToStorage"( % "Fontenelle", $ "Fontenelle.Pool Elevation" [@"t - 1"] ), @"t" ), "GetMaxReleaseGivenInflow"( % "Fontenelle", $ "Fontenelle.Inflow" [], @"t" ) COMMENTED_BY "Powerplant Capacity" ) );

    END;

    RULE                 "Set Unset Outflow";
    DESCRIPTION          "Sets the outflow for spillCalc and power methods, registering dependencies so that higher priority rules can set values. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    BEGIN

      $ "Fontenelle.Outflow" [] := $ "Fontenelle.Inflow" [];

    END;

  END;

  UTILITY_GROUP "Fontenelle Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  BEGIN

    FUNCTION       "HasAnyRuleFired" ( LIST rules )
    RETURN_TYPE    BOOLEAN;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    BEGIN

      FOR ( STRING rule IN rules ) WITH BOOLEAN fired = FALSE DO
      IF ( "HasRuleFiredSuccessfully"( rule ) AND NOT fired )
      THEN
         TRUE
      ELSE
         fired
      ENDIF
   ENDFOR;

    END;

  END;

END
